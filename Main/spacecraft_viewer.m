classdef spacecraft_viewer < handle

    properties
        body_handle
    	Vertices
    	Faces
    	facecolors
        plot_initialized
    end


    methods

        function self = spacecraft_viewer
            self.body_handle = [];
            [self.Vertices, self.Faces, self.facecolors] = self.define_spacecraft();
            self.plot_initialized = 0;
        end


        function self = update(self, state, axisLabel)
            if self.plot_initialized == 0
                self=self.drawBody(state.pn, state.pe, -state.h,...
                                   state.phi, state.theta, state.psi, axisLabel);

                xlabel(axisLabel, 'East')
                ylabel(axisLabel, 'North')
                %zlabel(axisLabel, '-Down')
                view(axisLabel, 32,47)  % set the vieew angle for figure
                %axis(axisLabel, [-40, 40, -20, 60, -0.5, 40]);
                xlim(axisLabel, [self.Vertices(1,1) - 30, self.Vertices(1,1) + 30]);
                ylim(axisLabel, [self.Vertices(1,2) - 30, self.Vertices(1,2) + 30]);
                zlim(axisLabel, [self.Vertices(1,3) - 30, self.Vertices(1,3) + 30]);
                hold(axisLabel, "on");
                grid(axisLabel, "on");
                self.plot_initialized = 1;
            else
                self=self.drawBody(state.pn, state.pe, -state.h,... 
                                   state.phi, state.theta, state.psi, axisLabel);

            end
        end


        function self = drawBody(self, pn, pe, pd, phi, theta, psi, axisLabel)
            Vertices = self.rotate(self.Vertices, phi, theta, psi);   % rotate rigid body  
            Vertices = self.translate(Vertices, pn, pe, pd);     % translate after rotation

            % transform vertices from NED to ENU (for matlab rendering)
            R = [...
                0, 1, 0;...
                1, 0, 0;...
                0, 0, -1;...
                ];

            Vertices = R*Vertices;
            if isempty(self.body_handle)
                self.body_handle = patch(axisLabel,'Vertices', Vertices', 'Faces', self.Faces,...
                                             'FaceVertexCData',self.facecolors,...
                                             'FaceColor','flat');

%                 p1 = patch(axisLabel, 'Vertices', [-100 -100; -100 100; 100 100; 100 -100], ...
%                                 "Faces", [1 2 3 4], ...
%                                 "FaceColor", [0.8500, 0.3250, 0.0980]);
%                 p1.FaceVertexAlphaData = 0.2;
%                 p1.FaceAlpha = 'flat';
            else
                a = Vertices';
                set(axisLabel,'XLim', [a(1,1) - 30, a(1,1) + 30]);
                set(axisLabel,'YLim', [a(1,2) - 30, a(1,2) + 30]);
                set(axisLabel,'ZLim', [a(1,3) - 30, a(1,3) + 30]);

                set(self.body_handle,'Vertices',Vertices','Faces',self.Faces);
                drawnow;
            end
        end 


        function pts = rotate(self, pts, phi, theta, psi)
            % define rotation matrix (right handed)
            R_roll = [...
                        1, 0, 0;...
                        0, cos(phi), sin(phi);...
                        0, -sin(phi), cos(phi)];
            R_pitch = [...
                        cos(theta), 0, -sin(theta);...
                        0, 1, 0;...
                        sin(theta), 0, cos(theta)];
            R_yaw = [...
                        cos(psi), sin(psi), 0;...
                        -sin(psi), cos(psi), 0;...
                        0, 0, 1];
            R = R_roll*R_pitch*R_yaw;   % inertial to body
            R = R';  % body to inertial

            %R = inv(R_yaw)*inv(R_pitch)*inv(R_roll) %it is same as above.

            % rotate vertices
            pts = R*pts;
        end



        function pts = translate(self, pts, pn, pe, pd)
            pts = pts + repmat([pn;pe;pd],1,size(pts,2));
        end


        function [V, F, colors] = define_spacecraft(self)
            % Define the vertices (physical location of vertices)
            V = [...
                2, 0, 0;...
                1, 1, 1;...
                1, -1, 1;...
                1, -1, -1;...
                1, 1, -1;...
                -6, 0, 0;...
                -4, 0, 0;...
                -6, 0, -3;...
                -6, -2, 0;...
                -6, 2, 0;...
                0, 3.5, 0;...
                0, -3.5, 0;...
                -2, -3.5, 0;...
                -2, 3.5, 0;...
            ]';

            % define faces as a list of vertices numbered above
            F = [...
                    1, 2, 3, NaN;...
                    1, 3, 4, NaN;...
                    1, 5, 4, NaN;... 
                    1, 2, 5, NaN;...
                    3, 4, 6, NaN;...
                    2, 3, 6, NaN;...
                    4, 5, 6, NaN;...
                    2, 5, 6, NaN;...
                    6, 7, 8, NaN;...
                    6, 7, 9, NaN;...
                    6, 7, 10,NaN;...
                    11,12,13,14;...
                    ];

            % define colors for each face    
            myred = [1, 0, 0];
            mygreen = [0, 1, 0];
            myblue = [0, 0, 1];
            myyellow = [1, 1, 0];
            mycyan = [0, 1, 1];

            colors = [...
                myblue;...
                myblue;...
                myblue;...
                myblue;...
                mycyan;...
                mycyan;...
                mycyan;...
                mycyan;...
                myred;... 
                myred;...
                myred;...
                myyellow;...
                ];
        end
    end
end